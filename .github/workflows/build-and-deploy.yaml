name: 'Build, test and deploy service-a'
on:
  push

env:
  ECR_REPO_PREFIX: my-repo
  IMAGE_TAG: latest

jobs:
  docker_build_and_test:
    name: Build and test docker
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Docker context create
        run: docker context create ${{ github.sha }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          endpoint: ${{ github.sha }}
      # Build the image
      - name: Build image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}/service-a:${{ env.IMAGE_TAG }}
          outputs: type=docker,dest=/tmp/service-a_image.tar
          push: false
      - name: Load Docker image
        run: |
          docker load --input /tmp/service-a_image.tar
      # Test the image
      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}/service-a:${{ env.IMAGE_TAG }}
          args: --severity-threshold=medium
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: service-a_image
          path: /tmp
          retention-days: 1
    outputs:
      ecr-registry: ${{ steps.login-ecr.outputs.registry }}

  helm_lint_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.7.2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.2.0
      # linting and testing only runs if the chart has changed
      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.ref_name }})
          if [[ -n "$changed" ]]; then
            echo "::set-output name=changed::true"
          fi
      - name: Run chart-testing (lint)
        run: ct lint --chart-dirs . --charts chart --validate-maintainers=false
        if: steps.list-changed.outputs.changed == 'true'
      - name: Create kind cluster
        uses: helm/kind-action@v1.2.0
        if: steps.list-changed.outputs.changed == 'true'
      - name: Run chart-testing (install)
        run: ct install --chart-dirs . --charts chart
        if: steps.list-changed.outputs.changed == 'true'

  push_and_deploy:
    name: Push image to ECR
    # allow this to run always because the Snyk scans may fail with vulnerabilities that can't yet be fixed 
    if: always()
    needs: [docker_build_and_test, helm_lint_and_test]
    runs-on: ubuntu-latest
    environment: push_and_deploy
    defaults:
      run:
        working-directory: .
    steps:
      - uses: actions/checkout@v2
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: service-a_image
          path: /tmp
      - name: Load Docker image
        run: |
          docker load --input /tmp/service-a_image.tar
      # Push image to ECR
      - name: Push docker image
        env:
          ECR_REGISTRY: ${{ needs.docker_build_and_test.outputs.ecr-registry }}
        run: |
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}/service-a:${{ env.IMAGE_TAG }}
      # Deploy Helm chart
      - name: Deploy
        uses: 'deliverybot/helm@master'
        with:
          token: ${{ github.token }}
          chart: ./chart
          namespace: default
          release: service-a
          value-files: ./chart/values.yaml
        env:
          KUBECONFIG_FILE: ${{ secrets.KUBECONFIG }}
